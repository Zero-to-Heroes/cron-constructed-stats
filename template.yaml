# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
# Indentation needs to be set with spaces, because YAML...
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Build constructed stats

Resources:
    BuildHourlyConstructedDeckStats:
        Type: AWS::Serverless::Function
        Properties:
            Handler: hourly/build-constructed-deck-stats.default
            Runtime: nodejs18.x
            Timeout: 880
            CodeUri: ./dist/hourly/build-constructed-deck-stats
            MemorySize: 6000
            ReservedConcurrentExecutions: 10
            # Layers:
            #     - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonSESFullAccess
                - SecretsManagerReadWrite
                - AmazonSNSReadOnlyAccess
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: cron-build-hourly-constructed-deck-stats
            Events:
                # Populate the info on the last hour
                LastPeriodTrigger:
                    Type: Schedule
                    Properties:
                        # Cron that runs every hour at 10 minutes past the hour
                        Schedule: cron(10 * * * ? *)
    BuildDailyAggregateDeckStats:
        Type: AWS::Serverless::Function
        Properties:
            Handler: daily/_build-daily-aggregate.default
            Runtime: nodejs18.x
            Timeout: 880
            CodeUri: ./dist/daily/_build-daily-aggregate
            MemorySize: 5000
            ReservedConcurrentExecutions: 10
            # Layers:
            #     - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonSESFullAccess
                - SecretsManagerReadWrite
                - AmazonSNSReadOnlyAccess
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: cron-build-daily-aggregate-deck-stats
            Events:
                # Populate the info on the last hour
                LastPeriodTrigger:
                    Type: Schedule
                    Properties:
                        # Cron that runs once a day at 00:10
                        Schedule: cron(10 0 * * ? *)
    FinalStatsByClass:
        Type: AWS::Serverless::Function
        Properties:
            Handler: final-result-by-class/build-aggregated-stats.default
            Runtime: nodejs18.x
            Timeout: 800
            CodeUri: ./dist/final-result-by-class/build-aggregated-stats
            MemorySize: 10000 
            ReservedConcurrentExecutions: 10 # Need to investigate locks. To avoid lock races when inserting data in DB
            # Layers:
            #     - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonSESFullAccess
                - SecretsManagerReadWrite
                - AmazonSNSReadOnlyAccess
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: cron-constructed-final-stats-by-class
                #  TODO: trigger this after the hourly builds have been done, either via direct lambda invocation
                #  or via sqs
            Events:
                LastPeriodTrigger:
                    Type: Schedule
                    Properties:
                        # Cron that runs every hour at 40 minutes past the hour
                        # Schedule: cron(25 * * * ? *)
                        Schedule: cron(25 0/3 * * ? *)
    FinalStatsByClassVersion:
        Type: AWS::Lambda::Version
        Properties:
            FunctionName: !Ref FinalStatsByClass
    FinalStatsByClassAsyncConfig:
        Type: AWS::Lambda::EventInvokeConfig
        Properties:
            FunctionName: !Ref FinalStatsByClass
            MaximumRetryAttempts: 0
            Qualifier: !GetAtt FinalStatsByClassVersion.Version
    FinalStats:
        Type: AWS::Serverless::Function
        Properties:
            Handler: final-stats/_build-aggregated-stats.default
            Runtime: nodejs18.x
            Timeout: 800
            CodeUri: ./dist/final-stats/_build-aggregated-stats
            MemorySize: 2000 
            ReservedConcurrentExecutions: 10 # Need to investigate locks. To avoid lock races when inserting data in DB
            # Layers:
            #     - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonSESFullAccess
                - SecretsManagerReadWrite
                - AmazonSNSReadOnlyAccess
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: cron-constructed-final-stats
                #  TODO: trigger this after the hourly builds have been done, either via direct lambda invocation
                #  or via sqs
            Events:
                LastPeriodTrigger:
                    Type: Schedule
                    Properties:
                        # Cron that runs every hour at 40 minutes past the hour
                        # Schedule: cron(40 * * * ? *)
                        Schedule: cron(40 0/3 * * ? *)
    FinalStatsVersion:
        Type: AWS::Lambda::Version
        Properties:
            FunctionName: !Ref FinalStats
    FinalStatsAsyncConfig:
        Type: AWS::Lambda::EventInvokeConfig
        Properties:
            FunctionName: !Ref FinalStats
            MaximumRetryAttempts: 0
            Qualifier: !GetAtt FinalStatsVersion.Version
    RetrieveConstructedDeckDetails:
        Type: AWS::Serverless::Function
        Properties:
            Handler: retrieve/get-constructed-meta-deck.default
            Runtime: nodejs18.x
            Timeout: 15
            MemorySize: 512
            CodeUri: ./dist/retrieve/get-constructed-meta-deck
            # Layers:
            #     - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonSESFullAccess
                - SecretsManagerReadWrite
                - AmazonSNSReadOnlyAccess
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: api-get-constructed-meta-deck
            AutoPublishAlias: live
            FunctionUrlConfig:
                AuthType: NONE



    ApiGatewayRestApi:
        Type: AWS::Serverless::Api
        Cors:
            AllowMethods: "'*'"
            AllowHeaders: "'*'"
            AllowOrigin: "'*'"
        Properties:
            Name: ConstructedDeckDetailsApi
            StageName: prod
            CacheClusterEnabled: true
            CacheClusterSize: '1.6'
            MethodSettings:
                - HttpMethod: '*'
                  CacheTtlInSeconds: 3600
                  ResourcePath: "/*"
                  CachingEnabled: true
                  LoggingLevel: ERROR

    RetrieveConstructedDeckDetailsViaApiGateway:
        Type: AWS::Serverless::Function
        Properties:
            Handler: retrieve/get-constructed-meta-deck-api-gateway.default
            Runtime: nodejs18.x
            Timeout: 15
            MemorySize: 512
            CodeUri: ./dist/retrieve/get-constructed-meta-deck-api-gateway
            # Layers:
            #     - !Sub "arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14"
            Policies:
                - AWSLambdaVPCAccessExecutionRole
                - AmazonSESFullAccess
                - SecretsManagerReadWrite
                - AmazonSNSReadOnlyAccess
                - AmazonS3FullAccess
                - AWSLambda_FullAccess
                - arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy
                # - arn:aws:iam::478062583808:policy/CloudWatchPolicyForLambda # See https://stackoverflow.com/questions/51166504/disable-cloudwatch-to-monitor-logs-for-lambda-function
            Tags:
                LambdaName: api-get-constructed-meta-deck-api-gateway
            Events:
                ApiGateway:
                    Type: Api
                    Properties:
                        Path: /constructed-meta-deck
                        Method: GET
                        RestApiId: !Ref ApiGatewayRestApi
                        RequestParameters:
                            - method.request.querystring.format: 
                                Required: true
                                Caching: true
                            - method.request.querystring.rank: 
                                Required: true
                                Caching: true
                            - method.request.querystring.timePeriod: 
                                Required: true
                                Caching: true
                            - method.request.querystring.deckId: 
                                Required: true
                                Caching: true
